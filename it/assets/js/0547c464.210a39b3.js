"use strict";(self.webpackChunkgo_jet_documentation=self.webpackChunkgo_jet_documentation||[]).push([[253],{3905:(e,n,i)=>{i.d(n,{Zo:()=>d,kt:()=>m});var t=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},d=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(i),m=r,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return i?t.createElement(g,a(a({ref:n},d),{},{components:i})):t.createElement(g,a({ref:n},d))}));function m(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=i[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}p.displayName="MDXCreateElement"},4658:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=i(7462),r=(i(7294),i(3905));const o={},a="Service container",s={unversionedId:"service_container",id:"service_container",title:"Service container",description:"I 'service container' sono potenti strumenti in grado di gestire le dipendenze del nostro applicativo.",source:"@site/i18n/it/docusaurus-plugin-content-docs/current/service_container.md",sourceDirName:".",slug:"/service_container",permalink:"/go-jet-documentation/it/docs/service_container",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Comandi CLI",permalink:"/go-jet-documentation/it/docs/cli"}},l={},c=[{value:"Definizione di un servizio",id:"definizione-di-un-servizio",level:2},{value:"Registrazione di un servizio",id:"registrazione-di-un-servizio",level:2},{value:"Services",id:"services",level:3},{value:"SingletonServices",id:"singletonservices",level:3},{value:"CommandServices",id:"commandservices",level:3},{value:"Utilizzo dei container",id:"utilizzo-dei-container",level:2}],d={toc:c};function u(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"service-container"},"Service container"),(0,r.kt)("p",null,"I 'service container' sono potenti strumenti in grado di gestire le dipendenze del nostro applicativo."),(0,r.kt)("p",null,"\xc8 possibile pensare ad un 'service container' come ad un contenitore dove al suo interno le dipendenze vengono risolte automaticamente.\nQuesto significa che tutti i metodi che vengono eseguiti all'interno questo contesto possono accedere a queste dipendenze."),(0,r.kt)("p",null,"Gli step necessari per utilizzare questo strumento sono:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Definire un servizio"),(0,r.kt)("li",{parentName:"ul"},"Registrarlo all'interno dello specifico container.")),(0,r.kt)("h2",{id:"definizione-di-un-servizio"},"Definizione di un servizio"),(0,r.kt)("p",null,"Tutti i servizi devono essere definiti all'interno del pacchetto ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," e consistono in un metodo che restituisce un oggetto ti uno specifico tipo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"title=\"Definizione del servizio 'Redis'\"",title:'"Definizione',del:!0,servizio:!0,"'Redis'\"":!0},'package service\n\nimport (\n "fmt"\n "github.com/shahind/go-jet/config"\n "github.com/go-redis/redis/v7"\n "github.com/labstack/gommon/log"\n)\n\n// ConnectRedis connect to Redis\nfunc ConnectRedis() *redis.Client {\n  conf := config.GetRedis()\n  client := redis.NewClient(&redis.Options{\n    Addr:     fmt.Sprintf("%s:%d", conf.Host, conf.Port),\n    Password: conf.Password,\n    DB:       1,\n  })\n\n  _, err := client.Ping().Result()\n\n  if err != nil {\n    log.Error(err)\n  }\n\n  return client\n}\n')),(0,r.kt)("p",null,"L'esempio di codice mostra come dovrebbe essere definito un servizio."),(0,r.kt)("p",null,"Possiamo notare che il metodo ",(0,r.kt)("inlineCode",{parentName:"p"},"ConnectRedis()")," restituisce un oggetto di tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"*redis.Client")," che, una volta registrato all'interno del service container, permetter\xe0 a controller e comandi di risolvere la dipendenza in automatico."),(0,r.kt)("h2",{id:"registrazione-di-un-servizio"},"Registrazione di un servizio"),(0,r.kt)("p",null,"Per poter registrare un servizio all'interno di un service container \xe8 necessario inserire il metodo creato in precedenza all'interno della struttura ",(0,r.kt)("inlineCode",{parentName:"p"},"foundation.BaseEntities")," situate nel pacchetto register."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"title=\"Registrazione del servizio 'Redis'\"",title:'"Registrazione',del:!0,servizio:!0,"'Redis'\"":!0},'package register\n\nimport (\n  "github.com/shahind/go-jet-framework"\n  "github.com/shahind/go-jet-framework/register"\n  "github.com/shahind/go-jet/app/console"\n  "github.com/shahind/go-jet/app/http/controller"\n  "github.com/shahind/go-jet/database/model"\n  "github.com/shahind/go-jet/router"\n  "github.com/shahind/go-jet/service"\n)\n\nfunc BaseEntities() foundation.BaseEntities {\n  return foundation.BaseEntities{\n  // ... other entities ...\n  Services: register.ServiceRegister{\n   service.ConnectDB,\n   service.ConnectElastic,\n   service.ConnectMongo,\n   service.ConnectRedis, // <- registrazione del servizio \'Redis\'\n  },\n  SingletonServices: register.ServiceRegister{},\n  CommandServices: console.Services,\n  // ... other entities ...\n }\n}\n')),(0,r.kt)("p",null,"Come \xe8 possibile notare, il servizio pu\xf2 essere registrato in tre modi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All'interno del campo ",(0,r.kt)("inlineCode",{parentName:"li"},"Services")),(0,r.kt)("li",{parentName:"ul"},"All'interno del campo ",(0,r.kt)("inlineCode",{parentName:"li"},"SingletonServices")),(0,r.kt)("li",{parentName:"ul"},"Popolando la struttura ",(0,r.kt)("inlineCode",{parentName:"li"},"console.Services"))),(0,r.kt)("h3",{id:"services"},"Services"),(0,r.kt)("p",null,"Rappresenta il service container generato ad ogni richiesta in arrivo. Le dipendenze risolte al suo interno vengono rigenerate ogni volta che viene presa un carico una nuova richiesta."),(0,r.kt)("h3",{id:"singletonservices"},"SingletonServices"),(0,r.kt)("p",null,"Rappresenta un service container che viene generato una sola volta all'avvio dell'applicazione.\nTutte le dipendenze risolte al suo interno vengono generato all'avvio dell'applicazione."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Tutti gli utilizzatori di questo service container utilizzeranno la stessa istanza.")),(0,r.kt)("h3",{id:"commandservices"},"CommandServices"),(0,r.kt)("p",null,"Consiste nel service container utilizzato da tutti i comandi eseguiti da CLI.\n\xc8 possibile configurare i servizi disponibili andando ad implementare la struttura ",(0,r.kt)("inlineCode",{parentName:"p"},"console.Services")," presente all'interno del paccheto ",(0,r.kt)("inlineCode",{parentName:"p"},"console"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Registrazione servizii in console.Services"',title:'"Registrazione',servizii:!0,in:!0,'console.Services"':!0},'package console\n\nimport (\n "github.com/shahind/go-jet-framework/register"\n "github.com/shahind/go-jet/service"\n)\n\nvar (\n  // Commands is used to register all console commands.\n  Commands = register.CommandRegister{}\n  // Services will be used to create the Console Service Container.\n  // This container is created to allow dependency injection through console commands.\n  Services = register.ServiceRegister{\n  service.ConnectDB,\n  service.ConnectElastic,\n  service.ConnectMongo,\n  service.ConnectRedis,\n  // ... OTHER SERVICES ...\n  }\n)\n')),(0,r.kt)("h2",{id:"utilizzo-dei-container"},"Utilizzo dei container"),(0,r.kt)("p",null,"Una volta configurati i servizi possono essere consumati all'interno di un container o da un comando eseguito da CLI.\nBaster\xe0 inserire il tipo di oggetto ritornato dal servizio come:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Parametro del metodo ",(0,r.kt)("inlineCode",{parentName:"li"},"Run()")," del comando"),(0,r.kt)("li",{parentName:"ul"},"Parametro dei metodi presenti all'interno dei controller.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="DI all\'interno di un controller"',title:'"DI',"all'interno":!0,di:!0,un:!0,'controller"':!0},'// Dependency injection in controller\npackage controller\n\nimport (\n    "github.com/shahind/go-jet-framework" \n    "github.com/shahind/go-jet/database/model" \n    "github.com/jinzhu/gorm"\n)\n\ntype SampleController struct{\n    gwf.BaseController\n}\n\n// Main controller method\nfunc (c *SampleController) Main(db *gorm.DB) {\n    // Il parametro `db *gorm.DB` \xe8 iniettato \n    // all\'interno del controller tramite il service container\n    var user model.User\n    if err := db.Find(&user).Error;err != nil {\n        gwf.ProcessError(err)\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="DI all\'interno di un comando"',title:'"DI',"all'interno":!0,di:!0,un:!0,'comando"':!0},'package console\n\ntype Batman struct {\n    Signature   string\n    Description string\n    Args        string\n}\n\n// Command registration\nfunc (c *Batman) Register() {\n    c.Signature = "command:signature"          // Change command signature\n    c.Description = "Execute database seeder"  // Change command desc\n}\n\n// Command business logic\nfunc (c *Batman) Run(db *gorm.DB) {\n    // Il parametro `db *gorm.DB` \xe8 iniettato \n    // all\'interno del controller tramite il service container\n    var user model.User\n    if err := db.Find(&user).Error;err != nil {\n        gwf.ProcessError(err)\n    }\n}\n')))}u.isMDXComponent=!0}}]);